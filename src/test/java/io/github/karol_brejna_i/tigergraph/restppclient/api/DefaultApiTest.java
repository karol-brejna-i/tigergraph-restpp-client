/*
 * TigerGraph REST++ API
 * Title
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.karol_brejna_i.tigergraph.restppclient.api;

import io.github.karol_brejna_i.tigergraph.restppclient.model.HelloResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void abortqueryGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.abortqueryGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void abortqueryGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.abortqueryGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void allpathsGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.allpathsGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void allpathsGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.allpathsGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void builtinsGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.builtinsGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ddlGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.ddlGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletedVertexCheckGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.deletedVertexCheckGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletedVertexCheckGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.deletedVertexCheckGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphDeleteByTypeVerticesVertexTypeDeleteTest() throws Exception {
        String vertexType = null;
        HelloResponse response = api.graphDeleteByTypeVerticesVertexTypeDelete(vertexType);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteTest() throws Exception {
        String sourceVertexType = null;
        String edgeType = null;
        String targetVertexType = null;
        String sourceVertexId = null;
        String targetVertexId = null;
        HelloResponse response = api.graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetTest() throws Exception {
        String sourceVertexType = null;
        String edgeType = null;
        String targetVertexType = null;
        String sourceVertexId = null;
        String targetVertexId = null;
        HelloResponse response = api.graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameDeleteByTypeVerticesVertexTypeDeleteTest() throws Exception {
        String graphName = null;
        String vertexType = null;
        HelloResponse response = api.graphGraphNameDeleteByTypeVerticesVertexTypeDelete(graphName, vertexType);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteTest() throws Exception {
        String graphName = null;
        String edgeType = null;
        String targetVertexType = null;
        String sourceVertexType = null;
        String sourceVertexId = null;
        String targetVertexId = null;
        HelloResponse response = api.graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetTest() throws Exception {
        String graphName = null;
        String edgeType = null;
        String targetVertexType = null;
        String sourceVertexType = null;
        String sourceVertexId = null;
        String targetVertexId = null;
        HelloResponse response = api.graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.graphGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameVerticesVertexTypeVertexIdDeleteTest() throws Exception {
        String graphName = null;
        String vertexType = null;
        String vertexId = null;
        HelloResponse response = api.graphGraphNameVerticesVertexTypeVertexIdDelete(graphName, vertexType, vertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameVerticesVertexTypeVertexIdGetTest() throws Exception {
        String graphName = null;
        String vertexType = null;
        String vertexId = null;
        HelloResponse response = api.graphGraphNameVerticesVertexTypeVertexIdGet(graphName, vertexType, vertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphVerticesVertexTypeVertexIdDeleteTest() throws Exception {
        String vertexType = null;
        String vertexId = null;
        HelloResponse response = api.graphVerticesVertexTypeVertexIdDelete(vertexType, vertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphVerticesVertexTypeVertexIdGetTest() throws Exception {
        String vertexType = null;
        String vertexId = null;
        HelloResponse response = api.graphVerticesVertexTypeVertexIdGet(vertexType, vertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * This endpoint allows you to check the results of queries run in Detached Mode if they have finished running. If the query is still running, the endpoint will respond with an error and a message saying \&quot;Unable to retrieve result for query &lt;requestid&gt;\&quot;. Ensure that the query is finished before checking its result. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void queryResultRequestidGetTest() throws Exception {
        String requestid = null;
        HelloResponse response = api.queryResultRequestidGet(requestid);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void queryStatusGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.queryStatusGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restpploaderGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.restpploaderGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void shortestpathGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.shortestpathGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void shortestpathGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.shortestpathGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void showlicenseinfoGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.showlicenseinfoGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void showprocesslistGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.showprocesslistGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void showprocesslistGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.showprocesslistGraphNamePost(graphName);

        // TODO: test validations
    }
}
