/*
 * TigerGraph REST++ API
 * Title
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.karol_brejna_i.tigergraph.restppclient.api;

import io.github.karol_brejna_i.tigergraph.restppclient.model.HelloResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void allpathsGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.allpathsGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void allpathsGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.allpathsGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void builtinsGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.builtinsGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void ddlGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.ddlGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletedVertexCheckGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.deletedVertexCheckGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletedVertexCheckGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.deletedVertexCheckGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphDeleteByTypeVerticesVertexTypeDeleteTest() throws Exception {
        String vertexType = null;
        HelloResponse response = api.graphDeleteByTypeVerticesVertexTypeDelete(vertexType);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteTest() throws Exception {
        String sourceVertexType = null;
        String edgeType = null;
        String targetVertexType = null;
        String sourceVertexId = null;
        String targetVertexId = null;
        HelloResponse response = api.graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetTest() throws Exception {
        String sourceVertexType = null;
        String edgeType = null;
        String targetVertexType = null;
        String sourceVertexId = null;
        String targetVertexId = null;
        HelloResponse response = api.graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameDeleteByTypeVerticesVertexTypeDeleteTest() throws Exception {
        String graphName = null;
        String vertexType = null;
        HelloResponse response = api.graphGraphNameDeleteByTypeVerticesVertexTypeDelete(graphName, vertexType);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteTest() throws Exception {
        String graphName = null;
        String edgeType = null;
        String targetVertexType = null;
        String sourceVertexType = null;
        String sourceVertexId = null;
        String targetVertexId = null;
        HelloResponse response = api.graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetTest() throws Exception {
        String graphName = null;
        String edgeType = null;
        String targetVertexType = null;
        String sourceVertexType = null;
        String sourceVertexId = null;
        String targetVertexId = null;
        HelloResponse response = api.graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.graphGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameVerticesVertexTypeVertexIdDeleteTest() throws Exception {
        String graphName = null;
        String vertexType = null;
        String vertexId = null;
        HelloResponse response = api.graphGraphNameVerticesVertexTypeVertexIdDelete(graphName, vertexType, vertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphGraphNameVerticesVertexTypeVertexIdGetTest() throws Exception {
        String graphName = null;
        String vertexType = null;
        String vertexId = null;
        HelloResponse response = api.graphGraphNameVerticesVertexTypeVertexIdGet(graphName, vertexType, vertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphVerticesVertexTypeVertexIdDeleteTest() throws Exception {
        String vertexType = null;
        String vertexId = null;
        HelloResponse response = api.graphVerticesVertexTypeVertexIdDelete(vertexType, vertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void graphVerticesVertexTypeVertexIdGetTest() throws Exception {
        String vertexType = null;
        String vertexId = null;
        HelloResponse response = api.graphVerticesVertexTypeVertexIdGet(vertexType, vertexId);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restpploaderGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.restpploaderGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void shortestpathGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.shortestpathGraphNameGet(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void shortestpathGraphNamePostTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.shortestpathGraphNamePost(graphName);

        // TODO: test validations
    }
    /**
     * TBD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void showlicenseinfoGraphNameGetTest() throws Exception {
        String graphName = null;
        HelloResponse response = api.showlicenseinfoGraphNameGet(graphName);

        // TODO: test validations
    }
}
