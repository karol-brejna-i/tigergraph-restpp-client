/*
 * TigerGraph REST++ API
 * Title
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.karol_brejna_i.tigergraph.restppclient.api;

import io.github.karol_brejna_i.tigergraph.restppclient.model.AbortQueryResponse;
import io.github.karol_brejna_i.tigergraph.restppclient.model.ErrorResponse;
import io.github.karol_brejna_i.tigergraph.restppclient.model.ProcessListResponse;
import io.github.karol_brejna_i.tigergraph.restppclient.model.QueryResponse;
import io.github.karol_brejna_i.tigergraph.restppclient.model.QueryStatusResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for QueryApi
 */
@Ignore
public class QueryApiTest {

    private final QueryApi api = new QueryApi();

    /**
     * Abort a query
     *
     * This endpoint safely aborts a selected query by ID or all queries of an endpoint by endpoint URL of a graph.  See: https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_abort_a_query 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void abortQueryGetTest() throws Exception {
        String graphName = null;
        String requestid = null;
        AbortQueryResponse response = api.abortQueryGet(graphName, requestid);

        // TODO: test validations
    }
    /**
     * Abort a query ** NOT TESTED **
     *
     * This endpoint safely aborts a selected query by ID or all queries of an endpoint by endpoint URL of a graph.  See: https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_abort_a_query 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void abortQueryPostTest() throws Exception {
        String graphName = null;
        AbortQueryResponse response = api.abortQueryPost(graphName);

        // TODO: test validations
    }
    /**
     * Check query status (Detached Mode)
     *
     * This endpoint allows you to check the status of a query run in detached mode.  https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_check_query_status_detached_modes 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void queryStatusTest() throws Exception {
        String graphName = null;
        List<String> requestid = null;
        QueryStatusResponse response = api.queryStatus(graphName, requestid);

        // TODO: test validations
    }
    /**
     * Run an installed query
     *
     * Each time a new TigerGraph query is installed, a dynamic endpoint is generated. This new endpoint enables the user to run the new TigerGraph query through HTTP requests and giving the parameters in URL or in a data payload. In the case of a GET request, parameters should be passed in through the query string. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void runInstalledQueryGetTest() throws Exception {
        String graphName = null;
        String queryName = null;
        Integer GSQL_REPLICA = null;
        Integer GSQL_THREAD_LIMIT = null;
        Integer GSQL_TIMEOUT = null;
        Boolean GSQL_ASYNC = null;
        Integer RESPONSE_LIMIT = null;
        Boolean readCommitted = null;
        Map<String, String> params = null;
        QueryResponse response = api.runInstalledQueryGet(graphName, queryName, GSQL_REPLICA, GSQL_THREAD_LIMIT, GSQL_TIMEOUT, GSQL_ASYNC, RESPONSE_LIMIT, readCommitted, params);

        // TODO: test validations
    }
    /**
     * Run an installed query
     *
     * Each time a new TigerGraph query is installed, a dynamic endpoint is generated. This new endpoint enables the user to run the new TigerGraph query through HTTP requests and giving the parameters in URL or in a data payload.  Users can run queries through a POST request, which allows them to pass query parameters in JSON. This is especially helpful when the query takes complex parameters. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void runInstalledQueryPostTest() throws Exception {
        String graphName = null;
        String queryName = null;
        Object body = null;
        Integer GSQL_REPLICA = null;
        Integer GSQL_THREAD_LIMIT = null;
        Integer GSQL_TIMEOUT = null;
        Boolean GSQL_ASYNC = null;
        Integer RESPONSE_LIMIT = null;
        Boolean readCommitted = null;
        QueryResponse response = api.runInstalledQueryPost(graphName, queryName, body, GSQL_REPLICA, GSQL_THREAD_LIMIT, GSQL_TIMEOUT, GSQL_ASYNC, RESPONSE_LIMIT, readCommitted);

        // TODO: test validations
    }
    /**
     * List running queries
     *
     * This endpoint reports statistics of running queries of a graph: the query’s request ID, start time, expiration time, and the REST endpoint’s URL  See: https://docs.tigergraph.com/tigergraph-server/current/api/built-in-endpoints#_list_running_queries 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void showProcessListGetTest() throws Exception {
        String graphName = null;
        ProcessListResponse response = api.showProcessListGet(graphName);

        // TODO: test validations
    }
    /**
     * TODO XXX listed in /endpoints results, but not mentioned in the docs...
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void showProcessListPostTest() throws Exception {
        String graphName = null;
        ProcessListResponse response = api.showProcessListPost(graphName);

        // TODO: test validations
    }
}
