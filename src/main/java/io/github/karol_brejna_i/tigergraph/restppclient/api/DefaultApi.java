/*
 * TigerGraph REST++ API
 * Title
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.karol_brejna_i.tigergraph.restppclient.api;

import io.github.karol_brejna_i.tigergraph.restppclient.invoker.ApiCallback;
import io.github.karol_brejna_i.tigergraph.restppclient.invoker.ApiClient;
import io.github.karol_brejna_i.tigergraph.restppclient.invoker.ApiException;
import io.github.karol_brejna_i.tigergraph.restppclient.invoker.ApiResponse;
import io.github.karol_brejna_i.tigergraph.restppclient.invoker.Configuration;
import io.github.karol_brejna_i.tigergraph.restppclient.invoker.Pair;
import io.github.karol_brejna_i.tigergraph.restppclient.invoker.ProgressRequestBody;
import io.github.karol_brejna_i.tigergraph.restppclient.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.karol_brejna_i.tigergraph.restppclient.model.HelloResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for abortqueryGraphNameGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call abortqueryGraphNameGetCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/abortquery/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call abortqueryGraphNameGetValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling abortqueryGraphNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = abortqueryGraphNameGetCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse abortqueryGraphNameGet(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = abortqueryGraphNameGetWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> abortqueryGraphNameGetWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = abortqueryGraphNameGetValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call abortqueryGraphNameGetAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = abortqueryGraphNameGetValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for abortqueryGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call abortqueryGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/abortquery/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call abortqueryGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling abortqueryGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = abortqueryGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse abortqueryGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = abortqueryGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> abortqueryGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = abortqueryGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call abortqueryGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = abortqueryGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allpathsGraphNameGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allpathsGraphNameGetCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/allpaths/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allpathsGraphNameGetValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling allpathsGraphNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = allpathsGraphNameGetCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse allpathsGraphNameGet(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = allpathsGraphNameGetWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> allpathsGraphNameGetWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = allpathsGraphNameGetValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allpathsGraphNameGetAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allpathsGraphNameGetValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for allpathsGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call allpathsGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/allpaths/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call allpathsGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling allpathsGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = allpathsGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse allpathsGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = allpathsGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> allpathsGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = allpathsGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call allpathsGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = allpathsGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for builtinsGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call builtinsGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/builtins/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call builtinsGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling builtinsGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = builtinsGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse builtinsGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = builtinsGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> builtinsGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = builtinsGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call builtinsGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = builtinsGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ddlGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ddlGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ddl/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ddlGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling ddlGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = ddlGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse ddlGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = ddlGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> ddlGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = ddlGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ddlGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ddlGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletedVertexCheckGraphNameGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletedVertexCheckGraphNameGetCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deleted_vertex_check/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletedVertexCheckGraphNameGetValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling deletedVertexCheckGraphNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = deletedVertexCheckGraphNameGetCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse deletedVertexCheckGraphNameGet(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = deletedVertexCheckGraphNameGetWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> deletedVertexCheckGraphNameGetWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = deletedVertexCheckGraphNameGetValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletedVertexCheckGraphNameGetAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletedVertexCheckGraphNameGetValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletedVertexCheckGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletedVertexCheckGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/deleted_vertex_check/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletedVertexCheckGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling deletedVertexCheckGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = deletedVertexCheckGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse deletedVertexCheckGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = deletedVertexCheckGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> deletedVertexCheckGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = deletedVertexCheckGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletedVertexCheckGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletedVertexCheckGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphDeleteByTypeVerticesVertexTypeDelete
     * @param vertexType The type of vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphDeleteByTypeVerticesVertexTypeDeleteCall(String vertexType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/delete_by_type/vertices/{vertex_type}/"
            .replaceAll("\\{" + "vertex_type" + "\\}", apiClient.escapeString(vertexType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphDeleteByTypeVerticesVertexTypeDeleteValidateBeforeCall(String vertexType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vertexType' is set
        if (vertexType == null) {
            throw new ApiException("Missing the required parameter 'vertexType' when calling graphDeleteByTypeVerticesVertexTypeDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = graphDeleteByTypeVerticesVertexTypeDeleteCall(vertexType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param vertexType The type of vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphDeleteByTypeVerticesVertexTypeDelete(String vertexType) throws ApiException {
        ApiResponse<HelloResponse> resp = graphDeleteByTypeVerticesVertexTypeDeleteWithHttpInfo(vertexType);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param vertexType The type of vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphDeleteByTypeVerticesVertexTypeDeleteWithHttpInfo(String vertexType) throws ApiException {
        com.squareup.okhttp.Call call = graphDeleteByTypeVerticesVertexTypeDeleteValidateBeforeCall(vertexType, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param vertexType The type of vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphDeleteByTypeVerticesVertexTypeDeleteAsync(String vertexType, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphDeleteByTypeVerticesVertexTypeDeleteValidateBeforeCall(vertexType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete
     * @param sourceVertexType The type of vertex. (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteCall(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}"
            .replaceAll("\\{" + "source_vertex_type" + "\\}", apiClient.escapeString(sourceVertexType.toString()))
            .replaceAll("\\{" + "edge_type" + "\\}", apiClient.escapeString(edgeType.toString()))
            .replaceAll("\\{" + "target_vertex_type" + "\\}", apiClient.escapeString(targetVertexType.toString()))
            .replaceAll("\\{" + "source_vertex_id" + "\\}", apiClient.escapeString(sourceVertexId.toString()))
            .replaceAll("\\{" + "target_vertex_id" + "\\}", apiClient.escapeString(targetVertexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteValidateBeforeCall(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sourceVertexType' is set
        if (sourceVertexType == null) {
            throw new ApiException("Missing the required parameter 'sourceVertexType' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'edgeType' is set
        if (edgeType == null) {
            throw new ApiException("Missing the required parameter 'edgeType' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'targetVertexType' is set
        if (targetVertexType == null) {
            throw new ApiException("Missing the required parameter 'targetVertexType' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'sourceVertexId' is set
        if (sourceVertexId == null) {
            throw new ApiException("Missing the required parameter 'sourceVertexId' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'targetVertexId' is set
        if (targetVertexId == null) {
            throw new ApiException("Missing the required parameter 'targetVertexId' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteCall(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param sourceVertexType The type of vertex. (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId) throws ApiException {
        ApiResponse<HelloResponse> resp = graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteWithHttpInfo(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param sourceVertexType The type of vertex. (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteWithHttpInfo(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId) throws ApiException {
        com.squareup.okhttp.Call call = graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteValidateBeforeCall(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param sourceVertexType The type of vertex. (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteAsync(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteValidateBeforeCall(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet
     * @param sourceVertexType The type of vertex. (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetCall(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}"
            .replaceAll("\\{" + "source_vertex_type" + "\\}", apiClient.escapeString(sourceVertexType.toString()))
            .replaceAll("\\{" + "edge_type" + "\\}", apiClient.escapeString(edgeType.toString()))
            .replaceAll("\\{" + "target_vertex_type" + "\\}", apiClient.escapeString(targetVertexType.toString()))
            .replaceAll("\\{" + "source_vertex_id" + "\\}", apiClient.escapeString(sourceVertexId.toString()))
            .replaceAll("\\{" + "target_vertex_id" + "\\}", apiClient.escapeString(targetVertexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetValidateBeforeCall(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sourceVertexType' is set
        if (sourceVertexType == null) {
            throw new ApiException("Missing the required parameter 'sourceVertexType' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'edgeType' is set
        if (edgeType == null) {
            throw new ApiException("Missing the required parameter 'edgeType' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'targetVertexType' is set
        if (targetVertexType == null) {
            throw new ApiException("Missing the required parameter 'targetVertexType' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'sourceVertexId' is set
        if (sourceVertexId == null) {
            throw new ApiException("Missing the required parameter 'sourceVertexId' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'targetVertexId' is set
        if (targetVertexId == null) {
            throw new ApiException("Missing the required parameter 'targetVertexId' when calling graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetCall(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param sourceVertexType The type of vertex. (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId) throws ApiException {
        ApiResponse<HelloResponse> resp = graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetWithHttpInfo(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param sourceVertexType The type of vertex. (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetWithHttpInfo(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId) throws ApiException {
        com.squareup.okhttp.Call call = graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetValidateBeforeCall(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param sourceVertexType The type of vertex. (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetAsync(String sourceVertexType, String edgeType, String targetVertexType, String sourceVertexId, String targetVertexId, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetValidateBeforeCall(sourceVertexType, edgeType, targetVertexType, sourceVertexId, targetVertexId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphGraphNameDeleteByTypeVerticesVertexTypeDelete
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameDeleteByTypeVerticesVertexTypeDeleteCall(String graphName, String vertexType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/{graph_name}/delete_by_type/vertices/{vertex_type}/"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()))
            .replaceAll("\\{" + "vertex_type" + "\\}", apiClient.escapeString(vertexType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphGraphNameDeleteByTypeVerticesVertexTypeDeleteValidateBeforeCall(String graphName, String vertexType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling graphGraphNameDeleteByTypeVerticesVertexTypeDelete(Async)");
        }
        // verify the required parameter 'vertexType' is set
        if (vertexType == null) {
            throw new ApiException("Missing the required parameter 'vertexType' when calling graphGraphNameDeleteByTypeVerticesVertexTypeDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = graphGraphNameDeleteByTypeVerticesVertexTypeDeleteCall(graphName, vertexType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphGraphNameDeleteByTypeVerticesVertexTypeDelete(String graphName, String vertexType) throws ApiException {
        ApiResponse<HelloResponse> resp = graphGraphNameDeleteByTypeVerticesVertexTypeDeleteWithHttpInfo(graphName, vertexType);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphGraphNameDeleteByTypeVerticesVertexTypeDeleteWithHttpInfo(String graphName, String vertexType) throws ApiException {
        com.squareup.okhttp.Call call = graphGraphNameDeleteByTypeVerticesVertexTypeDeleteValidateBeforeCall(graphName, vertexType, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameDeleteByTypeVerticesVertexTypeDeleteAsync(String graphName, String vertexType, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphGraphNameDeleteByTypeVerticesVertexTypeDeleteValidateBeforeCall(graphName, vertexType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteCall(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/{graph_name}/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()))
            .replaceAll("\\{" + "edge_type" + "\\}", apiClient.escapeString(edgeType.toString()))
            .replaceAll("\\{" + "target_vertex_type" + "\\}", apiClient.escapeString(targetVertexType.toString()))
            .replaceAll("\\{" + "source_vertex_type" + "\\}", apiClient.escapeString(sourceVertexType.toString()))
            .replaceAll("\\{" + "source_vertex_id" + "\\}", apiClient.escapeString(sourceVertexId.toString()))
            .replaceAll("\\{" + "target_vertex_id" + "\\}", apiClient.escapeString(targetVertexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteValidateBeforeCall(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'edgeType' is set
        if (edgeType == null) {
            throw new ApiException("Missing the required parameter 'edgeType' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'targetVertexType' is set
        if (targetVertexType == null) {
            throw new ApiException("Missing the required parameter 'targetVertexType' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'sourceVertexType' is set
        if (sourceVertexType == null) {
            throw new ApiException("Missing the required parameter 'sourceVertexType' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'sourceVertexId' is set
        if (sourceVertexId == null) {
            throw new ApiException("Missing the required parameter 'sourceVertexId' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        // verify the required parameter 'targetVertexId' is set
        if (targetVertexId == null) {
            throw new ApiException("Missing the required parameter 'targetVertexId' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteCall(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDelete(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId) throws ApiException {
        ApiResponse<HelloResponse> resp = graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteWithHttpInfo(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteWithHttpInfo(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId) throws ApiException {
        com.squareup.okhttp.Call call = graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteValidateBeforeCall(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteAsync(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdDeleteValidateBeforeCall(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetCall(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/{graph_name}/edges/{source_vertex_type}/{source_vertex_id}/{edge_type}/{target_vertex_type}/{target_vertex_id}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()))
            .replaceAll("\\{" + "edge_type" + "\\}", apiClient.escapeString(edgeType.toString()))
            .replaceAll("\\{" + "target_vertex_type" + "\\}", apiClient.escapeString(targetVertexType.toString()))
            .replaceAll("\\{" + "source_vertex_type" + "\\}", apiClient.escapeString(sourceVertexType.toString()))
            .replaceAll("\\{" + "source_vertex_id" + "\\}", apiClient.escapeString(sourceVertexId.toString()))
            .replaceAll("\\{" + "target_vertex_id" + "\\}", apiClient.escapeString(targetVertexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetValidateBeforeCall(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'edgeType' is set
        if (edgeType == null) {
            throw new ApiException("Missing the required parameter 'edgeType' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'targetVertexType' is set
        if (targetVertexType == null) {
            throw new ApiException("Missing the required parameter 'targetVertexType' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'sourceVertexType' is set
        if (sourceVertexType == null) {
            throw new ApiException("Missing the required parameter 'sourceVertexType' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'sourceVertexId' is set
        if (sourceVertexId == null) {
            throw new ApiException("Missing the required parameter 'sourceVertexId' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        // verify the required parameter 'targetVertexId' is set
        if (targetVertexId == null) {
            throw new ApiException("Missing the required parameter 'targetVertexId' when calling graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetCall(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGet(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId) throws ApiException {
        ApiResponse<HelloResponse> resp = graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetWithHttpInfo(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetWithHttpInfo(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId) throws ApiException {
        com.squareup.okhttp.Call call = graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetValidateBeforeCall(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param edgeType The type name of the edges.  *Note:* Use \&quot;_\&quot; for edge_type in the URL to permit any edge type.  (required)
     * @param targetVertexType The type of vertex. (required)
     * @param sourceVertexType The type of vertex. (required)
     * @param sourceVertexId The ID of the vertex. (required)
     * @param targetVertexId The ID of the vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetAsync(String graphName, String edgeType, String targetVertexType, String sourceVertexType, String sourceVertexId, String targetVertexId, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphGraphNameEdgesSourceVertexTypeSourceVertexIdEdgeTypeTargetVertexTypeTargetVertexIdGetValidateBeforeCall(graphName, edgeType, targetVertexType, sourceVertexType, sourceVertexId, targetVertexId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling graphGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = graphGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = graphGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = graphGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphGraphNameVerticesVertexTypeVertexIdDelete
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameVerticesVertexTypeVertexIdDeleteCall(String graphName, String vertexType, String vertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/{graph_name}/vertices/{vertex_type}/{vertex_id}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()))
            .replaceAll("\\{" + "vertex_type" + "\\}", apiClient.escapeString(vertexType.toString()))
            .replaceAll("\\{" + "vertex_id" + "\\}", apiClient.escapeString(vertexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphGraphNameVerticesVertexTypeVertexIdDeleteValidateBeforeCall(String graphName, String vertexType, String vertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling graphGraphNameVerticesVertexTypeVertexIdDelete(Async)");
        }
        // verify the required parameter 'vertexType' is set
        if (vertexType == null) {
            throw new ApiException("Missing the required parameter 'vertexType' when calling graphGraphNameVerticesVertexTypeVertexIdDelete(Async)");
        }
        // verify the required parameter 'vertexId' is set
        if (vertexId == null) {
            throw new ApiException("Missing the required parameter 'vertexId' when calling graphGraphNameVerticesVertexTypeVertexIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = graphGraphNameVerticesVertexTypeVertexIdDeleteCall(graphName, vertexType, vertexId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphGraphNameVerticesVertexTypeVertexIdDelete(String graphName, String vertexType, String vertexId) throws ApiException {
        ApiResponse<HelloResponse> resp = graphGraphNameVerticesVertexTypeVertexIdDeleteWithHttpInfo(graphName, vertexType, vertexId);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphGraphNameVerticesVertexTypeVertexIdDeleteWithHttpInfo(String graphName, String vertexType, String vertexId) throws ApiException {
        com.squareup.okhttp.Call call = graphGraphNameVerticesVertexTypeVertexIdDeleteValidateBeforeCall(graphName, vertexType, vertexId, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameVerticesVertexTypeVertexIdDeleteAsync(String graphName, String vertexType, String vertexId, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphGraphNameVerticesVertexTypeVertexIdDeleteValidateBeforeCall(graphName, vertexType, vertexId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphGraphNameVerticesVertexTypeVertexIdGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameVerticesVertexTypeVertexIdGetCall(String graphName, String vertexType, String vertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/{graph_name}/vertices/{vertex_type}/{vertex_id}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()))
            .replaceAll("\\{" + "vertex_type" + "\\}", apiClient.escapeString(vertexType.toString()))
            .replaceAll("\\{" + "vertex_id" + "\\}", apiClient.escapeString(vertexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphGraphNameVerticesVertexTypeVertexIdGetValidateBeforeCall(String graphName, String vertexType, String vertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling graphGraphNameVerticesVertexTypeVertexIdGet(Async)");
        }
        // verify the required parameter 'vertexType' is set
        if (vertexType == null) {
            throw new ApiException("Missing the required parameter 'vertexType' when calling graphGraphNameVerticesVertexTypeVertexIdGet(Async)");
        }
        // verify the required parameter 'vertexId' is set
        if (vertexId == null) {
            throw new ApiException("Missing the required parameter 'vertexId' when calling graphGraphNameVerticesVertexTypeVertexIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = graphGraphNameVerticesVertexTypeVertexIdGetCall(graphName, vertexType, vertexId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphGraphNameVerticesVertexTypeVertexIdGet(String graphName, String vertexType, String vertexId) throws ApiException {
        ApiResponse<HelloResponse> resp = graphGraphNameVerticesVertexTypeVertexIdGetWithHttpInfo(graphName, vertexType, vertexId);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphGraphNameVerticesVertexTypeVertexIdGetWithHttpInfo(String graphName, String vertexType, String vertexId) throws ApiException {
        com.squareup.okhttp.Call call = graphGraphNameVerticesVertexTypeVertexIdGetValidateBeforeCall(graphName, vertexType, vertexId, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphGraphNameVerticesVertexTypeVertexIdGetAsync(String graphName, String vertexType, String vertexId, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphGraphNameVerticesVertexTypeVertexIdGetValidateBeforeCall(graphName, vertexType, vertexId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphVerticesVertexTypeVertexIdDelete
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphVerticesVertexTypeVertexIdDeleteCall(String vertexType, String vertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/vertices/{vertex_type}/{vertex_id}"
            .replaceAll("\\{" + "vertex_type" + "\\}", apiClient.escapeString(vertexType.toString()))
            .replaceAll("\\{" + "vertex_id" + "\\}", apiClient.escapeString(vertexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphVerticesVertexTypeVertexIdDeleteValidateBeforeCall(String vertexType, String vertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vertexType' is set
        if (vertexType == null) {
            throw new ApiException("Missing the required parameter 'vertexType' when calling graphVerticesVertexTypeVertexIdDelete(Async)");
        }
        // verify the required parameter 'vertexId' is set
        if (vertexId == null) {
            throw new ApiException("Missing the required parameter 'vertexId' when calling graphVerticesVertexTypeVertexIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = graphVerticesVertexTypeVertexIdDeleteCall(vertexType, vertexId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphVerticesVertexTypeVertexIdDelete(String vertexType, String vertexId) throws ApiException {
        ApiResponse<HelloResponse> resp = graphVerticesVertexTypeVertexIdDeleteWithHttpInfo(vertexType, vertexId);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphVerticesVertexTypeVertexIdDeleteWithHttpInfo(String vertexType, String vertexId) throws ApiException {
        com.squareup.okhttp.Call call = graphVerticesVertexTypeVertexIdDeleteValidateBeforeCall(vertexType, vertexId, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphVerticesVertexTypeVertexIdDeleteAsync(String vertexType, String vertexId, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphVerticesVertexTypeVertexIdDeleteValidateBeforeCall(vertexType, vertexId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for graphVerticesVertexTypeVertexIdGet
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call graphVerticesVertexTypeVertexIdGetCall(String vertexType, String vertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/graph/vertices/{vertex_type}/{vertex_id}"
            .replaceAll("\\{" + "vertex_type" + "\\}", apiClient.escapeString(vertexType.toString()))
            .replaceAll("\\{" + "vertex_id" + "\\}", apiClient.escapeString(vertexId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call graphVerticesVertexTypeVertexIdGetValidateBeforeCall(String vertexType, String vertexId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vertexType' is set
        if (vertexType == null) {
            throw new ApiException("Missing the required parameter 'vertexType' when calling graphVerticesVertexTypeVertexIdGet(Async)");
        }
        // verify the required parameter 'vertexId' is set
        if (vertexId == null) {
            throw new ApiException("Missing the required parameter 'vertexId' when calling graphVerticesVertexTypeVertexIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = graphVerticesVertexTypeVertexIdGetCall(vertexType, vertexId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse graphVerticesVertexTypeVertexIdGet(String vertexType, String vertexId) throws ApiException {
        ApiResponse<HelloResponse> resp = graphVerticesVertexTypeVertexIdGetWithHttpInfo(vertexType, vertexId);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> graphVerticesVertexTypeVertexIdGetWithHttpInfo(String vertexType, String vertexId) throws ApiException {
        com.squareup.okhttp.Call call = graphVerticesVertexTypeVertexIdGetValidateBeforeCall(vertexType, vertexId, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param vertexType The type of vertex. (required)
     * @param vertexId The ID of the vertex. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call graphVerticesVertexTypeVertexIdGetAsync(String vertexType, String vertexId, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = graphVerticesVertexTypeVertexIdGetValidateBeforeCall(vertexType, vertexId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryResultRequestidGet
     * @param requestid The id of a query request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryResultRequestidGetCall(String requestid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/query_result/{requestid}"
            .replaceAll("\\{" + "requestid" + "\\}", apiClient.escapeString(requestid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryResultRequestidGetValidateBeforeCall(String requestid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'requestid' is set
        if (requestid == null) {
            throw new ApiException("Missing the required parameter 'requestid' when calling queryResultRequestidGet(Async)");
        }
        
        com.squareup.okhttp.Call call = queryResultRequestidGetCall(requestid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * This endpoint allows you to check the results of queries run in Detached Mode if they have finished running. If the query is still running, the endpoint will respond with an error and a message saying \&quot;Unable to retrieve result for query &lt;requestid&gt;\&quot;. Ensure that the query is finished before checking its result. 
     * @param requestid The id of a query request. (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse queryResultRequestidGet(String requestid) throws ApiException {
        ApiResponse<HelloResponse> resp = queryResultRequestidGetWithHttpInfo(requestid);
        return resp.getData();
    }

    /**
     * TBD
     * This endpoint allows you to check the results of queries run in Detached Mode if they have finished running. If the query is still running, the endpoint will respond with an error and a message saying \&quot;Unable to retrieve result for query &lt;requestid&gt;\&quot;. Ensure that the query is finished before checking its result. 
     * @param requestid The id of a query request. (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> queryResultRequestidGetWithHttpInfo(String requestid) throws ApiException {
        com.squareup.okhttp.Call call = queryResultRequestidGetValidateBeforeCall(requestid, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * This endpoint allows you to check the results of queries run in Detached Mode if they have finished running. If the query is still running, the endpoint will respond with an error and a message saying \&quot;Unable to retrieve result for query &lt;requestid&gt;\&quot;. Ensure that the query is finished before checking its result. 
     * @param requestid The id of a query request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryResultRequestidGetAsync(String requestid, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryResultRequestidGetValidateBeforeCall(requestid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryStatusGraphNameGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryStatusGraphNameGetCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/query_status/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryStatusGraphNameGetValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling queryStatusGraphNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = queryStatusGraphNameGetCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse queryStatusGraphNameGet(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = queryStatusGraphNameGetWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> queryStatusGraphNameGetWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = queryStatusGraphNameGetValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryStatusGraphNameGetAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryStatusGraphNameGetValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restpploaderGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restpploaderGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/restpploader/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restpploaderGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling restpploaderGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = restpploaderGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse restpploaderGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = restpploaderGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> restpploaderGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = restpploaderGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restpploaderGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restpploaderGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shortestpathGraphNameGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shortestpathGraphNameGetCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/shortestpath/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shortestpathGraphNameGetValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling shortestpathGraphNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = shortestpathGraphNameGetCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse shortestpathGraphNameGet(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = shortestpathGraphNameGetWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> shortestpathGraphNameGetWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = shortestpathGraphNameGetValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shortestpathGraphNameGetAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shortestpathGraphNameGetValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for shortestpathGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call shortestpathGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/shortestpath/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call shortestpathGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling shortestpathGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = shortestpathGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse shortestpathGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = shortestpathGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> shortestpathGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = shortestpathGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call shortestpathGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = shortestpathGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showlicenseinfoGraphNameGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showlicenseinfoGraphNameGetCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/showlicenseinfo/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showlicenseinfoGraphNameGetValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling showlicenseinfoGraphNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = showlicenseinfoGraphNameGetCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse showlicenseinfoGraphNameGet(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = showlicenseinfoGraphNameGetWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> showlicenseinfoGraphNameGetWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = showlicenseinfoGraphNameGetValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showlicenseinfoGraphNameGetAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showlicenseinfoGraphNameGetValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showprocesslistGraphNameGet
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showprocesslistGraphNameGetCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/showprocesslist/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showprocesslistGraphNameGetValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling showprocesslistGraphNameGet(Async)");
        }
        
        com.squareup.okhttp.Call call = showprocesslistGraphNameGetCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse showprocesslistGraphNameGet(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = showprocesslistGraphNameGetWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> showprocesslistGraphNameGetWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = showprocesslistGraphNameGetValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showprocesslistGraphNameGetAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showprocesslistGraphNameGetValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showprocesslistGraphNamePost
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showprocesslistGraphNamePostCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/showprocesslist/{graph_name}"
            .replaceAll("\\{" + "graph_name" + "\\}", apiClient.escapeString(graphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showprocesslistGraphNamePostValidateBeforeCall(String graphName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'graphName' is set
        if (graphName == null) {
            throw new ApiException("Missing the required parameter 'graphName' when calling showprocesslistGraphNamePost(Async)");
        }
        
        com.squareup.okhttp.Call call = showprocesslistGraphNamePostCall(graphName, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return HelloResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HelloResponse showprocesslistGraphNamePost(String graphName) throws ApiException {
        ApiResponse<HelloResponse> resp = showprocesslistGraphNamePostWithHttpInfo(graphName);
        return resp.getData();
    }

    /**
     * TBD
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @return ApiResponse&lt;HelloResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HelloResponse> showprocesslistGraphNamePostWithHttpInfo(String graphName) throws ApiException {
        com.squareup.okhttp.Call call = showprocesslistGraphNamePostValidateBeforeCall(graphName, null, null);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * TBD (asynchronously)
     * 
     * @param graphName The name of the graph (REQUIRED in case of multiple graph in the database). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showprocesslistGraphNamePostAsync(String graphName, final ApiCallback<HelloResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showprocesslistGraphNamePostValidateBeforeCall(graphName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<HelloResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
